plugins {
    id 'java'
}

group = 'cz.coffee'
version = '0.5'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += "-Xlint:deprecation"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}


tasks.register('withCopy') {
    dependsOn 'clean'
    dependsOn 'jar'

    doLast {
        printf("Coppy to plugins")
        copy {
            from tasks.named("jar").get().archiveFile.get().asFile
            into '/home/coffee/mc/plugins'
        }
        callAPI("reload+confirm")
        sleep(1000)
        callAPI("clearchat")
    }
}

static def callAPI(String cmd) {
    def command = "curl -s http://localhost:8080/command?cmd=" + cmd
    println "Executing: $command"
    def process = command.execute()
    def output = new StringBuffer()
    process.consumeProcessOutput(output, new StringBuffer())
    process.waitFor()

    if (process.exitValue() == 0) {
        println "Command executed successfully:\n$output"
    } else {
        println "Command failed with exit code ${process.exitValue()}:\n$output"
    }
}
